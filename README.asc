:toc: macro
:toc-title: Contents
:toclevels: 3
:experimental:

= Get started with Node.js and create a simple API

image:https://img.shields.io/github/license/rcmoutinho/basic-nodejs-api.svg[GitHub License]

The purpose of this initiative is to create a base code to get started any new project. But also to have a guide remembering all the key concepts and commands used during the development.

In the end, it is an open-sourced documentation to help developers (and my future self) with easy access to update and clone.

Enjoy the journey!

toc::[]

== Install

* https://git-scm.com/[Git]
* https://nodejs.org/en/download/package-manager/[Node.js]
** https://github.com/nvm-sh/nvm#installation-and-update[NVM] on Unix / OS X systems
** https://chocolatey.org/[Chocolatey] for Windows
* https://yarnpkg.com/en/docs/install[Yarn] (better and faster than NPM)

=== Visual Studio Code

Install https://code.visualstudio.com[here]. But you can use the editor you want. This section isn't required but recommended for better productivity.

There are some plugins that can be very helpful during development time.

* Plugins
** https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens[GitLens â€” Git supercharged]
** https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight[Color Highlight]
** https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig[EditorConfig for VS Code]
** https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint[ESLint]
** https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode[Prettier - Code formatter]
** https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components[vscode-styled-components]

=== Others

* Dealing with APIs: https://insomnia.rest[Insomnia] (recommended) or https://www.getpostman.com[Postman]

== Roadmap

=== Commands

* `yarn` -> Install and check all the configuration already on the project.

* `yarn init -y` -> Start a JavaScript project. The `-y` flag is to avoid answering questions about the project. In the end, this command will generate a file `package.json`.

* `yarn add express` -> Base framework to create the API (https://expressjs.com[expressjs.com]).

* `yarn add youch` -> Reading stack trace of the console slows you down from active development. Instead Youch print those errors in structured HTML to the browser (https://www.npmjs.com/package/youch[package/youch]).

* `yarn add sucrase nodemon -D`
** https://nodemon.io[nodemon.io] -> Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.
** https://sucrase.io/[sucrase.io] -> Tool that helps you write code in the latest version of JavaScript (Babel alternative), like imports, arrow functions, etc.

* `yarn add eslint -D` -> Verify if the source code is following the project rules like tab or spaces, encoding, etc (https://eslint.org/[eslint.org]).
+
[NOTE]
--
To start from scratch, execute `yarn eslint --init`. You will need to select some options according to your needs. The following image has the answers that created the base configuration for the `.eslintrc.js` file.

image::docs/images/yarn-eslint-init.png[yarn eslint --init]

Considering that this process uses `npm` to install all the dependencies, remove the file `package-lock.json` after the process. And then run `yarn` to map yarn dependencies on `yarn.lock` file.

**IMPORTANT:** DON'T FORGET TO INSTALL THE ESLINT VSCODE PLUGIN.

The following code will help VSCode to deal with Eslint configurations.

.vscode setting config
----

"eslint.autoFixOnSave": true,
"eslint.validate": [
    {
        "language": "javascript",
        "autoFix": true
    },
    {
        "language": "javascriptreact",
        "autoFix": true
    },
    {
        "language": "typescript",
        "autoFix": true
    },
    {
        "language": "typescriptreact",
        "autoFix": true
    }
],
----

There are some extra configurations after this initial setup.

* `"class-methods-use-this": "off"` -> Do not force class methods to use `this.`.
* `"no-param-reassign": "off"` -> Enable to modify parameters. It will be required during the usage of the lib `sequelize`.
* `"camelcase": "off"` -> Disable the need to always use CamelCase instead_of_this.
* `"no-unused-vars": ["error", { "argsIgnorePattern": "next" }` -> The default behavior is to avoid declaring a variable that won't be used in the future. But using `express`, there are some situations that will be necessary to define the parameter `next` even if it won't be used.
--

* `yarn add prettier eslint-config-prettier eslint-plugin-prettier -D` -> Will make the code looks better (https://prettier.io/[prettier.io]).
+
[NOTE]
--
After installing, it will be necessary to apply some extra configurations on `.eslintrc.js`.

..eslintrc.js
----
extends: ['airbnb-base', 'prettier'],
plugins: ['prettier'],
rules: {
  "prettier/prettier": "error",
  ...
},
----

And there are some rules that we need to adjust on prettier to fit the _airbnb_ pattern used by _eslint_.

..prettierrc
----
{
  "singleQuote": true,
  "trailingComma": "es5"
}
----
--

* `yarn eslint --fix src --ext .js` -> Check and fix all the files `.js` inside of `src`.

=== Scripts

The following commands are configured on the file `package.json`.

* `yarn dev` -> Start the server only once.

=== Folders

* `src` -> General source code.
* `src/app` -> Code related to the application.
* `src/app/controllers` -> Handle controllers.

=== Files

* `app.js` -> App configuration defining routes, middlewares, etc.
* `server.js` -> Server configuration.
* `routes.js` -> Routes configuration.

=== Configuration Files

* `.editorconfig` -> Define a default configuration to follow regarding the editor you are using.
* `nodemon.json` -> Nodemon configuration to support `sucrase-node` execution.
* `.prettierrc` -> Prettier settings.
* `.eslintrc.js` -> Eslint settings.

* `.gitignore` -> Files that you don't want to commit on your Version Control.
** `node_modules`
** User specific configuration like `.vscode`, etc.

== References

All this content was based and inspired on a Bootcamp that I participated in. It was online and in Portuguese. You can check more info on their https://rocketseat.com.br[website] and also on their https://github.com/rocketseat[GitHub], that has tons of code shared. It worth the price for sure! :rocket:
